
✅ X-AlphaFeed (Zero-Cost MVP) – Full Roadmap

🎯 Goal:
Build a working MVP that:
- ✅ Scrapes tweets with crypto/stock analysis  
- ✅ Stores them locally  
- ✅ Displays them in a searchable web feed  
- ✅ Costs nothing to run  

🚀 Phase 1: Project Setup

🧩 Tasks:
- [ ] Create a new GitHub repo (or local project folder)  
- [ ] Create two folders: backend/ and frontend/  
- [ ] Add .gitignore for Python and Node.js  
- [ ] Create a README.md to track progress  

🛠 Tools:
- Git  
- VS Code / your code editor  

🕷️ Phase 2: Scraper (No API, Using Playwright)

🧩 Tasks:
- [ ] Install Playwright and set it up:
  pip install playwright
  playwright install
- [ ] Create scraper/scrape.py script  
- [ ] Search Twitter for keywords: $BTC, $ETH, #stocks, #Solana, etc.
- [ ] Extract and save:
  - Tweet ID  
  - Author  
  - Text  
  - Timestamp  
  - URL  
- [ ] Store the results in tweets.json  

🛠 Tools:
- Python 3  
- Playwright  
- JSON  

🗃️ Phase 3: Backend (FastAPI)

🧩 Tasks:
- [ ] Initialize FastAPI project in backend/app/  
- [ ] Create backend files:
  - main.py  
  - routes/feed.py – returns all tweets  
  - routes/search.py – filters tweets by asset/tag  
- [ ] Read tweet data from tweets.json  
- [ ] Enable CORS to allow frontend access  

🔗 Endpoints:
- GET /feed → Return all tweets  
- GET /search?q=$BTC → Return filtered tweets  

🛠 Tools:
- FastAPI  
- Uvicorn  
- Python json module  

🌐 Phase 4: Frontend (Next.js)

🧩 Tasks:
- [ ] Set up Next.js project in frontend/:
  npx create-next-app frontend
- [ ] Install TailwindCSS (optional, for styling)  
- [ ] Create pages:
  - / → Homepage with tweet feed  
  - /search?q=$BTC → Search result page  
- [ ] Create components:
  - TweetCard.jsx – Shows tweet info  
  - SearchBar.jsx – Input for query  
- [ ] Fetch data from backend: /feed and /search  
- [ ] Display results in a card layout  

🛠 Tools:
- React (Next.js)  
- Axios or fetch  
- TailwindCSS or plain CSS  

🧪 Phase 5: Local Testing

🧩 Tasks:
- [ ] Run the scraper to generate tweets.json  
- [ ] Start the FastAPI backend:
  uvicorn app.main:app --reload
- [ ] Start the Next.js frontend:
  npm run dev
- [ ] Test everything:
  - ✅ Feed loads and displays tweets  
  - ✅ Search returns correct results  
  - ✅ Tweet cards link to original tweets  

🚢 Phase 6: (Optional) Free Deployment

Only after testing locally

🧩 Backend:
- [ ] Deploy to Render, Fly.io, or Railway (free tier)  
- [ ] Upload tweets.json manually or link it via GitHub raw  

🧩 Frontend:
- [ ] Deploy to Vercel (free, built for Next.js)

🧱 Folder Structure (Final)
x-alpha-feed/
├── backend/
│   ├── app/
│   │   ├── main.py
│   │   ├── routes/
│   │   │   ├── feed.py
│   │   │   └── search.py
│   │   ├── utils/
│   │   │   └── read_json.py
│   ├── scraper/
│   │   └── scrape.py
│   └── tweets.json
│
├── frontend/
│   ├── pages/
│   │   ├── index.js
│   │   └── search.js
│   ├── components/
│   │   ├── TweetCard.jsx
│   │   └── SearchBar.jsx
│   └── styles/
│       └── globals.css
│
├── README.md
├── .gitignore
└── requirements.txt

🧠 Future Upgrades (After MVP)
Feature                | Description
-----------------------|---------------------------------------------
SQLite/DB support      | Store tweets in a real database
Scheduled scraping     | Run the scraper every X minutes using cron
User-auth & posting    | Let users add posts and interact
Sentiment tags         | Add keyword-based or AI-powered sentiment
Pro dashboard          | Show most mentioned assets, trending words
